import { db } from './index';
import { locations, assets, assetCategories, priorities, roles, workflowStates, workflowTransitions, notificationTemplates } from './schema';
import { eq } from 'drizzle-orm';

async function seed() {
    console.log('🌱 Starting database seeding for Nexus CMMS...');

    try {
        // Seed Roles
        console.log('📋 Seeding user roles...');
        await db.insert(roles).values([
            {
                name: 'admin',
                displayName: 'System Administrator',
                description: 'Full system access with all permissions',
                level: 1,
                permissions: JSON.stringify({
                    canCreateTicket: true,
                    canEditTicket: true,
                    canDeleteTicket: true,
                    canAssignTicket: true,
                    canApproveTicket: true,
                    canViewAllTickets: true,
                    canManageMasterData: true,
                    canManageUsers: true,
                    canViewReports: true,
                    canExportData: true,
                    canManageTemplates: true,
                    canViewAuditLogs: true,
                    canManageWorkflows: true,
                    canApproveExpenses: true,
                    canBypassApproval: true,
                }),
                dataAccessScope: 'all',
                canApproveTickets: true,
                canApproveExpenses: true,
                maxApprovalAmount: '10000000.00',
                workingHoursStart: '08:00',
                workingHoursEnd: '17:00',
                workingDays: 'monday,tuesday,wednesday,thursday,friday',
                gpsTrackingRequired: false,
            },
            {
                name: 'supervisor',
                displayName: 'Supervisor',
                description: 'Team supervisor with approval authority',
                level: 2,
                permissions: JSON.stringify({
                    canCreateTicket: true,
                    canEditTicket: true,
                    canDeleteTicket: false,
                    canAssignTicket: true,
                    canApproveTicket: true,
                    canViewAllTickets: true,
                    canManageMasterData: false,
                    canManageUsers: false,
                    canViewReports: true,
                    canExportData: true,
                    canManageTemplates: false,
                    canViewAuditLogs: true,
                    canManageWorkflows: false,
                    canApproveExpenses: true,
                    canBypassApproval: false,
                }),
                dataAccessScope: 'team',
                canApproveTickets: true,
                canApproveExpenses: true,
                maxApprovalAmount: '5000000.00',
                workingHoursStart: '08:00',
                workingHoursEnd: '17:00',
                workingDays: 'monday,tuesday,wednesday,thursday,friday',
                gpsTrackingRequired: false,
            },
            {
                name: 'technician',
                displayName: 'Technician',
                description: 'Field technician for maintenance tasks',
                level: 3,
                permissions: JSON.stringify({
                    canCreateTicket: true,
                    canEditTicket: true,
                    canDeleteTicket: false,
                    canAssignTicket: false,
                    canApproveTicket: false,
                    canViewAllTickets: false,
                    canManageMasterData: false,
                    canManageUsers: false,
                    canViewReports: false,
                    canExportData: false,
                    canManageTemplates: false,
                    canViewAuditLogs: false,
                    canManageWorkflows: false,
                    canApproveExpenses: false,
                    canBypassApproval: false,
                }),
                dataAccessScope: 'own',
                canApproveTickets: false,
                canApproveExpenses: false,
                workingHoursStart: '08:00',
                workingHoursEnd: '17:00',
                workingDays: 'monday,tuesday,wednesday,thursday,friday',
                gpsTrackingRequired: true,
                maxWorkingRadiusKm: '50.00',
            },
            {
                name: 'viewer',
                displayName: 'Viewer',
                description: 'Read-only access for monitoring',
                level: 4,
                permissions: JSON.stringify({
                    canCreateTicket: false,
                    canEditTicket: false,
                    canDeleteTicket: false,
                    canAssignTicket: false,
                    canApproveTicket: false,
                    canViewAllTickets: true,
                    canManageMasterData: false,
                    canManageUsers: false,
                    canViewReports: true,
                    canExportData: true,
                    canManageTemplates: false,
                    canViewAuditLogs: false,
                    canManageWorkflows: false,
                    canApproveExpenses: false,
                    canBypassApproval: false,
                }),
                dataAccessScope: 'all',
                canApproveTickets: false,
                canApproveExpenses: false,
                gpsTrackingRequired: false,
            },
        ]).onConflictDoNothing();

        // Seed Priorities
        console.log('🎯 Seeding priority matrix...');
        await db.insert(priorities).values([
            {
                name: 'critical',
                level: 1,
                description: 'Critical system failure affecting business operations',
                color: '#DC2626',
                responseTimeHours: '1.00',
                resolutionTimeHours: '4.00',
                escalationIntervalHours: '1.00',
                maxEscalationLevel: 3,
                notificationChannels: JSON.stringify(['email', 'sms', 'push']),
                notificationFrequency: 'real_time',
                autoAssignToRole: 'supervisor',
                requireManagerApproval: true,
                businessHoursOnly: false,
                weekendSupport: true,
            },
            {
                name: 'high',
                level: 2,
                description: 'High priority issues affecting multiple users',
                color: '#F97316',
                responseTimeHours: '2.00',
                resolutionTimeHours: '8.00',
                escalationIntervalHours: '2.00',
                maxEscalationLevel: 2,
                notificationChannels: JSON.stringify(['email', 'push']),
                notificationFrequency: 'real_time',
                autoAssignToRole: 'supervisor',
                requireManagerApproval: false,
                businessHoursOnly: false,
                weekendSupport: true,
            },
            {
                name: 'medium',
                level: 3,
                description: 'Medium priority issues with partial impact',
                color: '#EAB308',
                responseTimeHours: '4.00',
                resolutionTimeHours: '24.00',
                escalationIntervalHours: '4.00',
                maxEscalationLevel: 2,
                notificationChannels: JSON.stringify(['email', 'push']),
                notificationFrequency: 'hourly',
                autoAssignToRole: 'technician',
                requireManagerApproval: false,
                businessHoursOnly: true,
                weekendSupport: false,
            },
            {
                name: 'low',
                level: 4,
                description: 'Low priority issues with minimal impact',
                color: '#22C55E',
                responseTimeHours: '8.00',
                resolutionTimeHours: '48.00',
                escalationIntervalHours: '8.00',
                maxEscalationLevel: 1,
                notificationChannels: JSON.stringify(['email']),
                notificationFrequency: 'daily',
                autoAssignToRole: 'technician',
                requireManagerApproval: false,
                businessHoursOnly: true,
                weekendSupport: false,
            },
        ]).onConflictDoNothing();

        // Seed Asset Categories
        console.log('📦 Seeding asset categories...');
        await db.insert(assetCategories).values([
            // Power Systems
            {
                name: 'UPS Systems',
                code: 'UPS',
                description: 'Uninterruptible Power Supply Systems',
                level: 1,
                path: 'Power/UPS',
                warrantyPeriodMonths: 24,
                expectedLifecycleYears: 5,
            },
            {
                name: 'Online UPS',
                code: 'UPS-ONL',
                description: 'Online Double Conversion UPS',
                parentCategoryId: null, // Will be updated after getting parent ID
                level: 2,
                path: 'Power/UPS/Online',
                warrantyPeriodMonths: 24,
                expectedLifecycleYears: 5,
            },
            {
                name: 'Line Interactive UPS',
                code: 'UPS-LIN',
                description: 'Line Interactive UPS Systems',
                parentCategoryId: null, // Will be updated after getting parent ID
                level: 2,
                path: 'Power/UPS/Line-Interactive',
                warrantyPeriodMonths: 24,
                expectedLifecycleYears: 5,
            },

            // Network Equipment
            {
                name: 'Network Equipment',
                code: 'NTW',
                description: 'Network Infrastructure Equipment',
                level: 1,
                path: 'Network',
                warrantyPeriodMonths: 36,
                expectedLifecycleYears: 7,
            },
            {
                name: 'Routers',
                code: 'NTW-RT',
                description: 'Network Routers',
                parentCategoryId: null, // Will be updated after getting parent ID
                level: 2,
                path: 'Network/Routers',
                warrantyPeriodMonths: 36,
                expectedLifecycleYears: 7,
            },
            {
                name: 'Switches',
                code: 'NTW-SW',
                description: 'Network Switches',
                parentCategoryId: null, // Will be updated after getting parent ID
                level: 2,
                path: 'Network/Switches',
                warrantyPeriodMonths: 36,
                expectedLifecycleYears: 7,
            },

            // Security Systems
            {
                name: 'CCTV Systems',
                code: 'CCTV',
                description: 'Closed Circuit Television Systems',
                level: 1,
                path: 'Security/CCTV',
                warrantyPeriodMonths: 24,
                expectedLifecycleYears: 5,
            },
            {
                name: 'IP Cameras',
                code: 'CCTV-IP',
                description: 'IP Network Cameras',
                parentCategoryId: null, // Will be updated after getting parent ID
                level: 2,
                path: 'Security/CCTV/IP-Cameras',
                warrantyPeriodMonths: 24,
                expectedLifecycleYears: 5,
            },
            {
                name: 'DVR/NVR',
                code: 'CCTV-DVR',
                description: 'Digital Video Recorders',
                parentCategoryId: null, // Will be updated after getting parent ID
                level: 2,
                path: 'Security/CCTV/DVR-NVR',
                warrantyPeriodMonths: 24,
                expectedLifecycleYears: 5,
            },

            // Server Systems
            {
                name: 'Servers',
                code: 'SRV',
                description: 'Server Systems and Infrastructure',
                level: 1,
                path: 'Computing/Servers',
                warrantyPeriodMonths: 36,
                expectedLifecycleYears: 5,
            },
            {
                name: 'Application Servers',
                code: 'SRV-APP',
                description: 'Application Servers',
                parentCategoryId: null, // Will be updated after getting parent ID
                level: 2,
                path: 'Computing/Servers/Application',
                warrantyPeriodMonths: 36,
                expectedLifecycleYears: 5,
            },
            {
                name: 'Database Servers',
                code: 'SRV-DB',
                description: 'Database Servers',
                parentCategoryId: null, // Will be updated after getting parent ID
                level: 2,
                path: 'Computing/Servers/Database',
                warrantyPeriodMonths: 36,
                expectedLifecycleYears: 5,
            },
        ]).onConflictDoNothing();

        // Update parent categories - this would need to be done in a more sophisticated way
        // For now, we'll leave parentCategoryId as null and handle it in application logic

        // Seed Sample Locations
        console.log('📍 Seeding sample locations...');
        await db.insert(locations).values([
            {
                tid: '160001',
                name: 'Jakarta Central Branch',
                address: 'Jl. Sudirman No. 123',
                city: 'Jakarta',
                province: 'DKI Jakarta',
                postalCode: '12190',
                country: 'Indonesia',
                latitude: '-6.229728',
                longitude: '106.829500',
                region: 'Jakarta',
                area: 'Central Jakarta',
                siteType: 'branch',
                operationalHours: '08:00-17:00',
                picName: 'Ahmad Suryadi',
                picPhone: '+628123456789',
                picEmail: 'ahmad.suryadi@company.com',
                status: 'active',
                locationType: 'branch',
                serviceLevel: 'premium',
            },
            {
                tid: '160002',
                name: 'Surabaya East Branch',
                address: 'Jl. Ahmad Yani No. 456',
                city: 'Surabaya',
                province: 'East Java',
                postalCode: '60234',
                country: 'Indonesia',
                latitude: '-7.257472',
                longitude: '112.752090',
                region: 'East Java',
                area: 'Surabaya',
                siteType: 'branch',
                operationalHours: '08:00-17:00',
                picName: 'Dewi Lestari',
                picPhone: '+628987654321',
                picEmail: 'dewi.lestari@company.com',
                status: 'active',
                locationType: 'branch',
                serviceLevel: 'standard',
            },
            {
                tid: '160003',
                name: 'Bandung Data Center',
                address: 'Jl. Gatot Subroto No. 789',
                city: 'Bandung',
                province: 'West Java',
                postalCode: '40273',
                country: 'Indonesia',
                latitude: '-6.917474',
                longitude: '107.619123',
                region: 'West Java',
                area: 'Bandung',
                siteType: 'datacenter',
                operationalHours: '24/7',
                picName: 'Budi Santoso',
                picPhone: '+628112233445',
                picEmail: 'budi.santoso@company.com',
                emergencyContact: 'Security Team',
                emergencyPhone: '+628223344556',
                status: 'active',
                locationType: 'datacenter',
                serviceLevel: 'enterprise',
            },
        ]).onConflictDoNothing();

        // Seed Workflow States
        console.log('🔄 Seeding workflow states...');
        await db.insert(workflowStates).values([
            // Common states
            {
                name: 'draft',
                displayName: 'Draft',
                description: 'Initial draft state - not yet submitted',
                category: 'both',
                order: 1,
                isStartState: true,
                requiresAction: false,
                canTransitionFrom: JSON.stringify([]),
                canTransitionTo: JSON.stringify(['open']),
                allowedRoles: JSON.stringify(['admin', 'supervisor', 'technician']),
                allowReopening: false,
                requireCompletionData: false,
                isSlaRunning: false,
                color: '#6B7280',
            },
            {
                name: 'open',
                displayName: 'Open',
                description: 'Ticket is open and waiting for assignment',
                category: 'both',
                order: 2,
                requiresAction: true,
                canTransitionFrom: JSON.stringify(['draft', 'rejected']),
                canTransitionTo: JSON.stringify(['assigned', 'cancelled']),
                allowedRoles: JSON.stringify(['admin', 'supervisor']),
                allowReopening: false,
                requireCompletionData: false,
                isSlaRunning: true,
                color: '#3B82F6',
            },
            {
                name: 'assigned',
                displayName: 'Assigned',
                description: 'Ticket has been assigned to a technician',
                category: 'both',
                order: 3,
                requiresAction: true,
                canTransitionFrom: JSON.stringify(['open']),
                canTransitionTo: JSON.stringify(['acknowledged', 'reassigned']),
                allowedRoles: JSON.stringify(['admin', 'supervisor', 'technician']),
                allowReopening: false,
                requireCompletionData: false,
                isSlaRunning: true,
                color: '#8B5CF6',
            },
            {
                name: 'acknowledged',
                displayName: 'Acknowledged',
                description: 'Technician has acknowledged the assignment',
                category: 'both',
                order: 4,
                requiresAction: true,
                canTransitionFrom: JSON.stringify(['assigned']),
                canTransitionTo: JSON.stringify(['on_progress', 'rejected']),
                allowedRoles: JSON.stringify(['admin', 'supervisor', 'technician']),
                allowReopening: false,
                requireCompletionData: false,
                isSlaRunning: true,
                color: '#06B6D4',
            },
            {
                name: 'on_progress',
                displayName: 'On Progress',
                description: 'Technician is actively working on the ticket',
                category: 'both',
                order: 5,
                requiresAction: true,
                canTransitionFrom: JSON.stringify(['acknowledged']),
                canTransitionTo: JSON.stringify(['pending_review', 'cancelled']),
                allowedRoles: JSON.stringify(['admin', 'supervisor', 'technician']),
                allowReopening: false,
                requireCompletionData: false,
                isSlaRunning: true,
                color: '#F59E0B',
            },
            {
                name: 'pending_review',
                displayName: 'Pending Review',
                description: 'Work completed and waiting for approval',
                category: 'both',
                order: 6,
                requiresAction: true,
                canTransitionFrom: JSON.stringify(['on_progress']),
                canTransitionTo: JSON.stringify(['approved', 'rejected']),
                allowedRoles: JSON.stringify(['admin', 'supervisor']),
                allowReopening: false,
                requireCompletionData: true,
                isSlaRunning: true,
                pauseSla: true,
                color: '#EC4899',
            },
            {
                name: 'rejected',
                displayName: 'Rejected',
                description: 'Work rejected and needs resubmission',
                category: 'both',
                order: 7,
                requiresAction: true,
                canTransitionFrom: JSON.stringify(['pending_review']),
                canTransitionTo: JSON.stringify(['acknowledged', 'cancelled']),
                allowedRoles: JSON.stringify(['admin', 'supervisor', 'technician']),
                allowReopening: false,
                requireCompletionData: false,
                isSlaRunning: true,
                color: '#EF4444',
            },
            {
                name: 'approved',
                displayName: 'Approved',
                description: 'Work has been approved and completed',
                category: 'both',
                order: 8,
                requiresAction: true,
                canTransitionFrom: JSON.stringify(['pending_review']),
                canTransitionTo: JSON.stringify(['closed']),
                allowedRoles: JSON.stringify(['admin', 'supervisor']),
                allowReopening: false,
                requireCompletionData: false,
                isSlaRunning: false,
                color: '#10B981',
            },
            {
                name: 'closed',
                displayName: 'Closed',
                description: 'Ticket is closed and jobcard generated',
                category: 'both',
                order: 9,
                isEndState: true,
                requiresAction: false,
                canTransitionFrom: JSON.stringify(['approved']),
                canTransitionTo: JSON.stringify([]),
                allowedRoles: JSON.stringify(['admin', 'supervisor']),
                allowReopening: true,
                requireCompletionData: false,
                isSlaRunning: false,
                color: '#059669',
            },
            {
                name: 'cancelled',
                displayName: 'Cancelled',
                description: 'Ticket has been cancelled',
                category: 'both',
                order: 10,
                isEndState: true,
                requiresAction: false,
                canTransitionFrom: JSON.stringify(['open', 'on_progress', 'rejected']),
                canTransitionTo: JSON.stringify([]),
                allowedRoles: JSON.stringify(['admin', 'supervisor']),
                allowReopening: false,
                requireCompletionData: false,
                isSlaRunning: false,
                color: '#6B7280',
            },
        ]).onConflictDoNothing();

        // Seed Notification Templates
        console.log('📧 Seeding notification templates...');
        await db.insert(notificationTemplates).values([
            {
                name: 'ticket_created',
                category: 'ticket_created',
                description: 'Notification when a new ticket is created',
                isActive: true,
                channels: JSON.stringify(['email', 'push']),
                subjectTemplate: 'New {{category}} Ticket Created: {{ticketNumber}}',
                bodyTemplate: 'A new {{category}} ticket has been created:\n\nTicket Number: {{ticketNumber}}\nTitle: {{title}}\nLocation: {{locationName}}\nPriority: {{priority}}\nDescription: {{description}}\n\nPlease check the system for more details.',
                smsTemplate: 'New {{category}} ticket {{ticketNumber}} at {{locationName}} ({{priority}} priority)',
                requiredVariables: JSON.stringify(['ticketNumber', 'category', 'title', 'locationName', 'priority', 'description']),
                priority: 'normal',
                retryAttempts: 3,
                retryDelayMinutes: 5,
                sendImmediately: true,
            },
            {
                name: 'ticket_assigned',
                category: 'ticket_assigned',
                description: 'Notification when a ticket is assigned to a technician',
                isActive: true,
                channels: JSON.stringify(['email', 'push', 'sms']),
                subjectTemplate: 'Ticket Assigned: {{ticketNumber}}',
                bodyTemplate: 'You have been assigned a new ticket:\n\nTicket Number: {{ticketNumber}}\nTitle: {{title}}\nLocation: {{locationName}}\nPriority: {{priority}}\nDue Date: {{dueDate}}\n\nPlease acknowledge this assignment promptly.',
                smsTemplate: 'Ticket {{ticketNumber}} assigned to you at {{locationName}} ({{priority}} priority)',
                requiredVariables: JSON.stringify(['ticketNumber', 'title', 'locationName', 'priority', 'dueDate']),
                priority: 'high',
                retryAttempts: 3,
                retryDelayMinutes: 5,
                sendImmediately: true,
            },
            {
                name: 'ticket_completed',
                category: 'ticket_completed',
                description: 'Notification when a ticket is completed and pending review',
                isActive: true,
                channels: JSON.stringify(['email', 'push']),
                subjectTemplate: 'Ticket Completed - Review Required: {{ticketNumber}}',
                bodyTemplate: 'A ticket has been completed and is pending your review:\n\nTicket Number: {{ticketNumber}}\nTitle: {{title}}\nTechnician: {{technicianName}}\nCompleted At: {{completedAt}}\n\nPlease review and approve or reject the work.',
                requiredVariables: JSON.stringify(['ticketNumber', 'title', 'technicianName', 'completedAt']),
                priority: 'normal',
                retryAttempts: 3,
                retryDelayMinutes: 5,
                sendImmediately: true,
            },
            {
                name: 'ticket_approved',
                category: 'ticket_approved',
                description: 'Notification when a ticket is approved',
                isActive: true,
                channels: JSON.stringify(['email', 'push']),
                subjectTemplate: 'Ticket Approved: {{ticketNumber}}',
                bodyTemplate: 'Your ticket work has been approved:\n\nTicket Number: {{ticketNumber}}\nTitle: {{title}}\nApproved By: {{approverName}}\nApproved At: {{approvedAt}}\n\nJobcard will be generated shortly.',
                requiredVariables: JSON.stringify(['ticketNumber', 'title', 'approverName', 'approvedAt']),
                priority: 'normal',
                retryAttempts: 3,
                retryDelayMinutes: 5,
                sendImmediately: true,
            },
            {
                name: 'ticket_rejected',
                category: 'ticket_rejected',
                description: 'Notification when a ticket is rejected',
                isActive: true,
                channels: JSON.stringify(['email', 'push', 'sms']),
                subjectTemplate: 'Action Required - Ticket Rejected: {{ticketNumber}}',
                bodyTemplate: 'Your ticket work has been rejected and requires corrections:\n\nTicket Number: {{ticketNumber}}\nTitle: {{title}}\nRejected By: {{rejectorName}}\nRejected At: {{rejectedAt}}\nReason: {{rejectionReason}}\nComments: {{rejectionComments}}\n\nPlease make the required corrections and resubmit.',
                smsTemplate: 'Ticket {{ticketNumber}} rejected. Please review and resubmit with corrections.',
                requiredVariables: JSON.stringify(['ticketNumber', 'title', 'rejectorName', 'rejectedAt', 'rejectionReason', 'rejectionComments']),
                priority: 'high',
                retryAttempts: 3,
                retryDelayMinutes: 5,
                sendImmediately: true,
            },
            {
                name: 'sla_breach_warning',
                category: 'sla_breach_warning',
                description: 'Warning when SLA is at risk of breach',
                isActive: true,
                channels: JSON.stringify(['email', 'push', 'sms']),
                subjectTemplate: 'SLA Breach Warning: {{ticketNumber}}',
                bodyTemplate: 'A ticket is at risk of SLA breach:\n\nTicket Number: {{ticketNumber}}\nTitle: {{title}}\nPriority: {{priority}}\nSLA Due: {{slaDue}}\nTime Remaining: {{timeRemaining}}\n\nPlease take immediate action.',
                smsTemplate: 'SLA Warning: Ticket {{ticketNumber}} at {{locationName}} due in {{timeRemaining}}',
                requiredVariables: JSON.stringify(['ticketNumber', 'title', 'priority', 'slaDue', 'timeRemaining', 'locationName']),
                priority: 'urgent',
                retryAttempts: 5,
                retryDelayMinutes: 2,
                sendImmediately: true,
            },
        ]).onConflictDoNothing();

        console.log('✅ Database seeding completed successfully!');
        console.log('');
        console.log('📊 Seeded data summary:');
        console.log('   - 4 User roles (admin, supervisor, technician, viewer)');
        console.log('   - 4 Priority levels (critical, high, medium, low)');
        console.log('   - 11 Asset categories (UPS, Network, CCTV, Servers)');
        console.log('   - 3 Sample locations (Jakarta, Surabaya, Bandung)');
        console.log('   - 10 Workflow states (draft to closed)');
        console.log('   - 6 Notification templates');
        console.log('');
        console.log('🚀 Nexus CMMS is ready for use!');

    } catch (error) {
        console.error('❌ Error seeding database:', error);
        throw error;
    }
}

// Run seed function if this file is executed directly
if (require.main === module) {
    seed()
        .then(() => process.exit(0))
        .catch(() => process.exit(1));
}

export { seed };